x<-1:10
if (x>5) {}
x<-5
y<-if(x<3) {}
y<-if(x<3) {NA} else {10}
library(datasets)
data(iris)
?iris
dimnames(iris)
iris
subset(iris,Species=='virginica')
d1=subset(iris,Species=='virginica')
d1
mean(d1)
mean(d[[Sepal.Length]])
mean(d1[[Sepal.Length]])
mean(d1[[1]])
mean(d1[["Sepal.Length"]])
colMeans(iris)
apply(iris[,1:4],2,mean)
apply(iris,1,mean)
apply(iris[,1:4],1,mean)
library(datasets)
data(?mtcars)
data(mtcars)
?mtcars
mtcars
lapply(mtcars,mmean
)
lapply(mtcars,mean)
mean(mtcars$mpg,mtcars$cyl)
with(mtcars, tapply(mpg,cyl,mean))
sapply(mtcars,cyl,mean)
mtcars
with(mtcars, tapply(hp,cyl,mean))
209.21429-82.63636
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x['8'] - x['4']
set.seed(1)
rpois(5,2)
set.seed(10)
x<-rep(0:10, each=5)
x
e<-rnorm(10,0,20)
e
y<-0.5+s*x+e
y<-0.5+2*x+e
y
library(xlsx)
package.install('xlsx',repos='http://cran.r-project.org')
install.packages('xlsx',repos='http://cran.r-project.org')
library(xlsx)
install.packages('xlsx',repos='http://cran.r-project.org')
library(xlsx)
install.packages('rJava',repos='http://cran.r-project.org')
library(xlsx)
library(rJava)
library(xlsx)
install.packages('rJava',,'http://www.rforge.net/')
library(rJava)
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
library(rJava)
install.packages('rJava',,'http://www.rforge.net/')
install.packages('rJava','http://cran.r-project.org/')
install.packages('rJava',repos='http://cran.r-project.org/')
library(rJava)
install.packages('XML',repos='http://cran.r-project.org/')
library(XML)
file <- "http://d396qusza40orc.cloudfront.net/getdata/data/restaurants.xml"
my.doc <- xmlTreeParse(file=file,useInternal=TRUE)
root.Node <- xmlRoot(my.doc)
xmlName(root.Node)
zipcode <- xpathSApply(root.Node, "//zipcode", xmlValue)
length(zipcode[zipcode==21231])
library(data.table)
install.packages('data.table',repos='http://cran.r-project.org/')
library(data.table)
DT <- fread(input="getdata-data-ss06pid.csv", sep=",")
library(data.table)
library()
library(xlsx)
library(rJava)
getwd()
list.files
list.files()
?replace
?sapply
?match
?which
?apply
?lapply
?sapply
?weekdays
xyplot
?qnorm
qnorm(.95,1100,75)
qnorm(.95,1100,7.5)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm,col="green", breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
reg<-table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Countied in Each Region")
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pm25~region,data=pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<-subset(pollution,region=="east")
head(east)
hist(east$pm25,col="green")
hist(subset(pollution,region=="west")$pm25,col="green")
with(pollution,plot(latitude~pm25))
with(pollution,plot(latitude,pm25))
abline(h=12)
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwt=2, lty=2)
abline(h=12, lwt=d, lty=2)
Type abline(h = 12, lwd = 2, lty = 2)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west<-subset(pollution,region=="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
?Devices
R(faithful,plot(eruptions,waiting))
windows(faithful,plot(eruptions,waiting))
plot(faithful$eruptions,faithful$waiting)
with(faithful,plot(eruptions,waiting))
annotate(main="Old Faithful Geyser data")
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.copy(png,geyserplot.png)
dev.copy(png,"geyserplot.png"")
dev.copy(png,"geyserplot.png)
dev.copy(png,"geyserplot.png")
dev.copy(png,file="geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed,dist()))
with(cars,plot(speed,dist)
)
text(mean(cars$speed,max(cars$dist),"SWIRL rules!"))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region,data=state,layout=c(4,1))
xyplot(Life.Exp ~ Income | region,data=state,layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,data=mpg)
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
swirl()
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppd)", col.axis="blue", col.lab="red")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
title("Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title("Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone,type="n")
title(main="Wind and Ozone in NYC")
may<-subset(airquality,months==5)
may<-subset(airquality,months=="5")
may<-subset(airquality,months)
may<-subset(airquality,months==T)
may<-subset(airquality,airquality$months==5)
may<-subset(airquality,Month==5)
points(may$Wind,may$Ozone)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay<-subset(airquality,Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=18)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
lines(h=median(airquality$wind),lty=2,lwd=2)
abline(h=median(airquality$wind),lty=2,lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind)
plot(airquality$Wind,airquality$Ozone,main = "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind,airquality$Ozone,main = "Ozone and Wind")
plot(airquality$Solar.R,airquality$Ozone,main = "Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone,main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
head(airquality)
xyplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality,col="red", pch=8, main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month),airquality)
xyplot(Ozone~Wind | as.factor(Month),data=airquality,layout=c(5,1))
xyplot(Ozone~Wind | Month,data=airquality,layout=c(5,1))
p<-xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout=c(2,1))
v1
v2
myedit("plot1.R")
source("plot1.R",local=TRUE)
source("./plot1.R",local=TRUE)
list.files()
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat | color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat | color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(),10)
pal<-c("red","blue")
pal<-colorRamp(c("red","blue")
)
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3<-colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols<-brewer.pal(3,"BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ,hwy,mpg)
qplot("displ","hwy",mpg)
qplot("displ","hwy",data=mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplt")
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,.~drv)
qplot(displ,hwy,data=mpg, . ~ drv)
qplot(displ,hwy,data=mpg, facets=. ~ drv)
qplot(hwy,data=mpg, facets= drv~.,binwidth=2)
qplot(displ,hwy,data=mpg,c("point","smooth"),facets=.~drv,method="loess")
qplot(displ,hwy,data=mpg,geom=paste("point","smooth"),facets=.~drv,method="loess")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="loess")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
info()
skip()
swirl()
info()
skip()
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
pwd
get_pwd()
get_wd()
ld
ls
getwd()
setwd("Coursera")
getwd()
mkdir("DataProducts")
setwd("DProd")
getwd()
install.packages("shiny")
library(shiny)
shiny::runApp()
data(mtcars)
library(datasets)
data(mtcars)
mtcars
?datasets
library(help = "datasets")
data("EuStockMarkets")
str(EuStockMarkets)
head(EuStockMarkets)
?EuStockMarkets
data("LakeHuron")
head(LakeHuron)
LakeHuron
data("UKDriverDeaths")
head(UKDriverDeaths)
table(EuStockMarkets)
data(AirPassengers)
head(AirPassengers)
data(LifeCycleSavings)
head(LifeCycleSavings)
?LifeCycleSavings
?Titanic
data(Titanic)
headTitanic
head(Titanic)
Titanic
?USArrests
require(graphics)
pairs(USArrests, panel = panel.smooth, main = "USArrests data")
WWWusage
uspop
mtcars
subset(mtcars, select=c("mpg","cyl","disp","wt","am"))
data<-subset(data(mtcars), select=c("mpg","cyl","disp","wt","am"))
data<-subset(mtcars, select=c("mpg","cyl","disp","wt","am"))
data
?data
table(data)
summary(data)
mtcars
d <- subset(mtcars, select=c("mpg","hp","cyl","disp","wt","am"))
summary(data)
summary(d)
shiny::runApp()
shiny::runApp()
?tabsetPanel
?p
p()
?dataTableOutput
shiny::runApp()
shiny::runApp()
install.packages("DT")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("rCharts")
shiny::runApp()
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install.packages("Rcpp")
install_github('ramnathv/rCharts')
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
shiny::runApp()
shiny::runApp()
